package com.scm.services.impl;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.scm.entities.User;
import com.scm.helpers.AppConstants;
import com.scm.helpers.ResourceNotFoundException;
import com.scm.repositories.UserRepo;
import com.scm.services.UserService;


@Service
public class UserServiceImpl implements UserService{

    //repository
    @Autowired
    private UserRepo userRepo;

    @Autowired
    private PasswordEncoder passwordEncoder;

    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Override
    public User saveUser(User user) {
        //userId has to be generated by the database
        String userId=UUID.randomUUID().toString();
        user.setUserId(userId);
        //pasword encode
        user.setUserPassword(passwordEncoder.encode(user.getPassword()));

        //set the user role
        user.setRolesList(List.of( AppConstants.USER_ROLE));
        return userRepo.save(user);
    }

    @Override
    public Optional<User> getUserById(String id) {
        return userRepo.findById(id);
    }

    @Override
    public Optional<User> updatUser(User user) {
        //fetch the user from the database
        User user2=userRepo.findById(user.getUserId()).orElseThrow(() -> new ResourceNotFoundException("User not found"));
        //update the user2 with the information of user
        user2.setUserName((user.getUsername()));
        user2.setUserEmail(user.getUserEmail());
        user2.setUserPassword(user.getPassword());
        user2.setAbout(user.getAbout());
        user2.setProfilePic(user.getProfilePic());
        user2.setPhoneNumber(user.getPhoneNumber());
        user2.setEnabled(user.isEnabled());
        user2.setEmailVerified(user.isEmailVerified());
        user2.setPhoneVerified(user.isPhoneVerified());
        user2.setProvider(user.getProvider());
        user2.setProviderId(user.getProviderId());
        //save the user2 with all the new infos in the database

        User save=userRepo.save(user2);
        return Optional.ofNullable(save);

       
    }

    @Override
    public void deleteUser(String id) {

        //fetch the user from the database
        User user2=userRepo.findById(id).
        orElseThrow(() -> new ResourceNotFoundException("User not found"));
        userRepo.delete(user2);

       
    }

    @Override
    public boolean isUserExist(String id) {
         //fetch the user from the database
         User user2=userRepo.findById(id).orElse(null);
         return user2!=null?true:false;
         
        
    }

    @Override
    public List<User> getAllUsers() {
     
        return userRepo.findAll();
    }

    
}
